package me.rorykelly.denki;

public final class DenkiGraphics {

	// Color key
	// 0 => Transparent
	// 1 => Base colour
	// 2 => Highlight colour
	// 3 => Shadow colour

	// completely transparent 8x8 block
	protected static final int[][] TRAN = { { 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0 } };

	// north west and south east corner
	protected static final int[][] NWSE = { { 0, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 1, 1, 1, 1, 1, 1 },
			{ 2, 1, 1, 1, 1, 1, 1, 1 }, { 2, 1, 1, 1, 1, 1, 1, 1 }, { 2, 1, 1, 1, 1, 1, 1, 1 },
			{ 2, 1, 1, 1, 1, 1, 1, 1 }, { 2, 1, 1, 1, 1, 1, 1, 1 }, { 2, 1, 1, 1, 1, 1, 1, 1 } };

	// north/south edge
	protected static final int[][] NS = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 1, 1, 1, 1, 1, 1, 1, 1 },
			{ 1, 1, 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1 },
			{ 1, 1, 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1 } };

	// north east corner
	protected static final int[][] NE = { { 2, 2, 2, 2, 2, 2, 3, 0 }, { 1, 1, 1, 1, 1, 1, 2, 3 },
			{ 1, 1, 1, 1, 1, 1, 1, 3 }, { 1, 1, 1, 1, 1, 1, 1, 3 }, { 1, 1, 1, 1, 1, 1, 1, 3 },
			{ 1, 1, 1, 1, 1, 1, 1, 3 }, { 1, 1, 1, 1, 1, 1, 1, 3 }, { 1, 1, 1, 1, 1, 1, 1, 3 } };

	// south west corner
	protected static final int[][] SW = { { 2, 1, 1, 1, 1, 1, 1, 1 }, { 2, 1, 1, 1, 1, 1, 1, 1 },
			{ 2, 1, 1, 1, 1, 1, 1, 1 }, { 2, 1, 1, 1, 1, 1, 1, 1 }, { 2, 1, 1, 1, 1, 1, 1, 1 },
			{ 2, 1, 1, 1, 1, 1, 1, 1 }, { 3, 2, 1, 1, 1, 1, 1, 1 }, { 0, 3, 3, 3, 3, 3, 3, 3 } };

	// west/east edge
	protected static final int[][] WE = { { 2, 1, 1, 1, 1, 1, 1, 1 }, { 2, 1, 1, 1, 1, 1, 1, 1 },
			{ 2, 1, 1, 1, 1, 1, 1, 1 }, { 2, 1, 1, 1, 1, 1, 1, 1 }, { 2, 1, 1, 1, 1, 1, 1, 1 },
			{ 2, 1, 1, 1, 1, 1, 1, 1 }, { 2, 1, 1, 1, 1, 1, 1, 1 }, { 2, 1, 1, 1, 1, 1, 1, 1 } };

	// center block, mono color
	protected static final int[][] CEN = { { 1, 1, 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1 },
			{ 1, 1, 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1 },
			{ 1, 1, 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1 } };

	// north facing edge, one block wide
	protected static final int[][] TOP = { { 0, 2, 2, 2, 2, 2, 3, 0 }, { 2, 2, 1, 1, 1, 1, 2, 3 },
			{ 2, 1, 1, 1, 1, 1, 1, 3 }, { 2, 1, 1, 1, 1, 1, 1, 3 }, { 2, 1, 1, 1, 1, 1, 1, 3 },
			{ 2, 1, 1, 1, 1, 1, 1, 3 }, { 2, 1, 1, 1, 1, 1, 1, 3 }, { 2, 1, 1, 1, 1, 1, 1, 3 } };

	// south facing edge, one block wide
	protected static final int[][] BOT = { { 2, 1, 1, 1, 1, 1, 1, 3 }, { 2, 1, 1, 1, 1, 1, 1, 3 },
			{ 2, 1, 1, 1, 1, 1, 1, 3 }, { 2, 1, 1, 1, 1, 1, 1, 3 }, { 2, 1, 1, 1, 1, 1, 1, 3 },
			{ 2, 1, 1, 1, 1, 1, 1, 3 }, { 3, 2, 1, 1, 1, 1, 3, 3 }, { 0, 3, 3, 3, 3, 3, 3, 0 } };

	// west/east facing edge, one block wide
	protected static final int[][] LEFT = { { 0, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 1, 1, 1, 1, 1, 1 },
			{ 2, 1, 1, 1, 1, 1, 1, 1 }, { 2, 1, 1, 1, 1, 1, 1, 1 }, { 2, 1, 1, 1, 1, 1, 1, 1 },
			{ 2, 1, 1, 1, 1, 1, 1, 1 }, { 3, 2, 1, 1, 1, 1, 1, 1 }, { 0, 3, 3, 3, 3, 3, 3, 3 } };

	// west/east facing edge, one block wide
	protected static final int[][] RIGHT = { { 2, 2, 2, 2, 2, 2, 3, 0 }, { 1, 1, 1, 1, 1, 1, 2, 3 },
			{ 1, 1, 1, 1, 1, 1, 1, 3 }, { 1, 1, 1, 1, 1, 1, 1, 3 }, { 1, 1, 1, 1, 1, 1, 1, 3 },
			{ 1, 1, 1, 1, 1, 1, 1, 3 }, { 1, 1, 1, 1, 1, 1, 3, 3 }, { 3, 3, 3, 3, 3, 3, 3, 0 } };

	// one block wide with north/south edges
	protected static final int[][] HOR = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 1, 1, 1, 1, 1, 1, 1, 1 },
			{ 1, 1, 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1 },
			{ 1, 1, 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1 }, { 3, 3, 3, 3, 3, 3, 3, 3 } };

	// one block wide with west/east edges
	protected static final int[][] VER = { { 2, 1, 1, 1, 1, 1, 1, 3 }, { 2, 1, 1, 1, 1, 1, 1, 3 },
			{ 2, 1, 1, 1, 1, 1, 1, 3 }, { 2, 1, 1, 1, 1, 1, 1, 3 }, { 2, 1, 1, 1, 1, 1, 1, 3 },
			{ 2, 1, 1, 1, 1, 1, 1, 3 }, { 2, 1, 1, 1, 1, 1, 1, 3 }, { 2, 1, 1, 1, 1, 1, 1, 3 } };

	// single block, edges and corners at all compass directions
	protected static final int[][] SING = { { 0, 2, 2, 2, 2, 2, 3, 0 }, { 2, 2, 1, 1, 1, 1, 2, 3 },
			{ 2, 1, 1, 1, 1, 1, 1, 3 }, { 2, 1, 1, 1, 1, 1, 1, 3 }, { 2, 1, 1, 1, 1, 1, 1, 3 },
			{ 2, 1, 1, 1, 1, 1, 1, 3 }, { 3, 2, 1, 1, 1, 1, 3, 3 }, { 0, 3, 3, 3, 3, 3, 3, 0 } };
}
